{"ast":null,"code":"/*!\n  * Bootstrap polyfill.js v5.0.0-alpha1 (https://getbootstrap.com/)\n  * Copyright 2011-2020 The Bootstrap Authors (https://github.com/twbs/bootstrap/graphs/contributors)\n  * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n  */\n(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) : typeof define === 'function' && define.amd ? define(['exports'], factory) : (global = global || self, factory(global.Polyfill = {}));\n})(this, function (exports) {\n  'use strict';\n  /**\n   * --------------------------------------------------------------------------\n   * Bootstrap (v5.0.0-alpha1): util/index.js\n   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n   * --------------------------------------------------------------------------\n   */\n\n  var MAX_UID = 1000000;\n  /**\n   * --------------------------------------------------------------------------\n   * Public Util Api\n   * --------------------------------------------------------------------------\n   */\n\n  var getUID = function getUID(prefix) {\n    do {\n      prefix += Math.floor(Math.random() * MAX_UID);\n    } while (document.getElementById(prefix));\n\n    return prefix;\n  };\n  /* istanbul ignore file */\n\n\n  exports.find = Element.prototype.querySelectorAll;\n  exports.findOne = Element.prototype.querySelector; // MSEdge resets defaultPrevented flag upon dispatchEvent call if at least one listener is attached\n\n  var defaultPreventedPreservedOnDispatch = function () {\n    var e = new CustomEvent('Bootstrap', {\n      cancelable: true\n    });\n    var element = document.createElement('div');\n    element.addEventListener('Bootstrap', function () {\n      return null;\n    });\n    e.preventDefault();\n    element.dispatchEvent(e);\n    return e.defaultPrevented;\n  }();\n\n  var scopeSelectorRegex = /:scope\\b/;\n\n  var supportScopeQuery = function () {\n    var element = document.createElement('div');\n\n    try {\n      element.querySelectorAll(':scope *');\n    } catch (_) {\n      return false;\n    }\n\n    return true;\n  }();\n\n  if (!supportScopeQuery) {\n    exports.find = function find(selector) {\n      if (!scopeSelectorRegex.test(selector)) {\n        return this.querySelectorAll(selector);\n      }\n\n      var hasId = Boolean(this.id);\n\n      if (!hasId) {\n        this.id = getUID('scope');\n      }\n\n      var nodeList = null;\n\n      try {\n        selector = selector.replace(scopeSelectorRegex, \"#\" + this.id);\n        nodeList = this.querySelectorAll(selector);\n      } finally {\n        if (!hasId) {\n          this.removeAttribute('id');\n        }\n      }\n\n      return nodeList;\n    };\n\n    exports.findOne = function findOne(selector) {\n      if (!scopeSelectorRegex.test(selector)) {\n        return this.querySelector(selector);\n      }\n\n      var matches = exports.find.call(this, selector);\n\n      if (typeof matches[0] !== 'undefined') {\n        return matches[0];\n      }\n\n      return null;\n    };\n  }\n\n  exports.defaultPreventedPreservedOnDispatch = defaultPreventedPreservedOnDispatch;\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n});","map":{"version":3,"sources":["../../src/util/index.js","../../src/dom/polyfill.js"],"names":["MAX_UID","getUID","prefix","Math","document","find","Element","querySelectorAll","findOne","querySelector","defaultPreventedPreservedOnDispatch","e","cancelable","element","scopeSelectorRegex","supportScopeQuery","hasId","Boolean","nodeList","selector","matches"],"mappings":"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","sourcesContent":["/**\n * --------------------------------------------------------------------------\n * Bootstrap (v5.0.0-alpha1): util/index.js\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n * --------------------------------------------------------------------------\n */\n\nconst MAX_UID = 1000000\nconst MILLISECONDS_MULTIPLIER = 1000\nconst TRANSITION_END = 'transitionend'\n\n// Shoutout AngusCroll (https://goo.gl/pxwQGp)\nconst toType = obj => {\n  if (obj === null || obj === undefined) {\n    return `${obj}`\n  }\n\n  return {}.toString.call(obj).match(/\\s([a-z]+)/i)[1].toLowerCase()\n}\n\n/**\n * --------------------------------------------------------------------------\n * Public Util Api\n * --------------------------------------------------------------------------\n */\n\nconst getUID = prefix => {\n  do {\n    prefix += Math.floor(Math.random() * MAX_UID)\n  } while (document.getElementById(prefix))\n\n  return prefix\n}\n\nconst getSelector = element => {\n  let selector = element.getAttribute('data-target')\n\n  if (!selector || selector === '#') {\n    const hrefAttr = element.getAttribute('href')\n\n    selector = hrefAttr && hrefAttr !== '#' ? hrefAttr.trim() : null\n  }\n\n  return selector\n}\n\nconst getSelectorFromElement = element => {\n  const selector = getSelector(element)\n\n  if (selector) {\n    return document.querySelector(selector) ? selector : null\n  }\n\n  return null\n}\n\nconst getElementFromSelector = element => {\n  const selector = getSelector(element)\n\n  return selector ? document.querySelector(selector) : null\n}\n\nconst getTransitionDurationFromElement = element => {\n  if (!element) {\n    return 0\n  }\n\n  // Get transition-duration of the element\n  let {\n    transitionDuration,\n    transitionDelay\n  } = window.getComputedStyle(element)\n\n  const floatTransitionDuration = parseFloat(transitionDuration)\n  const floatTransitionDelay = parseFloat(transitionDelay)\n\n  // Return 0 if element or transition duration is not found\n  if (!floatTransitionDuration && !floatTransitionDelay) {\n    return 0\n  }\n\n  // If multiple durations are defined, take the first\n  transitionDuration = transitionDuration.split(',')[0]\n  transitionDelay = transitionDelay.split(',')[0]\n\n  return (parseFloat(transitionDuration) + parseFloat(transitionDelay)) * MILLISECONDS_MULTIPLIER\n}\n\nconst triggerTransitionEnd = element => {\n  element.dispatchEvent(new Event(TRANSITION_END))\n}\n\nconst isElement = obj => (obj[0] || obj).nodeType\n\nconst emulateTransitionEnd = (element, duration) => {\n  let called = false\n  const durationPadding = 5\n  const emulatedDuration = duration + durationPadding\n  function listener() {\n    called = true\n    element.removeEventListener(TRANSITION_END, listener)\n  }\n\n  element.addEventListener(TRANSITION_END, listener)\n  setTimeout(() => {\n    if (!called) {\n      triggerTransitionEnd(element)\n    }\n  }, emulatedDuration)\n}\n\nconst typeCheckConfig = (componentName, config, configTypes) => {\n  Object.keys(configTypes)\n    .forEach(property => {\n      const expectedTypes = configTypes[property]\n      const value = config[property]\n      const valueType = value && isElement(value) ?\n        'element' :\n        toType(value)\n\n      if (!new RegExp(expectedTypes).test(valueType)) {\n        throw new Error(\n          `${componentName.toUpperCase()}: ` +\n          `Option \"${property}\" provided type \"${valueType}\" ` +\n          `but expected type \"${expectedTypes}\".`)\n      }\n    })\n}\n\nconst isVisible = element => {\n  if (!element) {\n    return false\n  }\n\n  if (element.style && element.parentNode && element.parentNode.style) {\n    const elementStyle = getComputedStyle(element)\n    const parentNodeStyle = getComputedStyle(element.parentNode)\n\n    return elementStyle.display !== 'none' &&\n      parentNodeStyle.display !== 'none' &&\n      elementStyle.visibility !== 'hidden'\n  }\n\n  return false\n}\n\nconst findShadowRoot = element => {\n  if (!document.documentElement.attachShadow) {\n    return null\n  }\n\n  // Can find the shadow root otherwise it'll return the document\n  if (typeof element.getRootNode === 'function') {\n    const root = element.getRootNode()\n    return root instanceof ShadowRoot ? root : null\n  }\n\n  if (element instanceof ShadowRoot) {\n    return element\n  }\n\n  // when we don't find a shadow root\n  if (!element.parentNode) {\n    return null\n  }\n\n  return findShadowRoot(element.parentNode)\n}\n\nconst noop = () => function () {}\n\nconst reflow = element => element.offsetHeight\n\nconst getjQuery = () => {\n  const { jQuery } = window\n\n  if (jQuery && !document.body.hasAttribute('data-no-jquery')) {\n    return jQuery\n  }\n\n  return null\n}\n\nexport {\n  getjQuery,\n  TRANSITION_END,\n  getUID,\n  getSelectorFromElement,\n  getElementFromSelector,\n  getTransitionDurationFromElement,\n  triggerTransitionEnd,\n  isElement,\n  emulateTransitionEnd,\n  typeCheckConfig,\n  isVisible,\n  findShadowRoot,\n  noop,\n  reflow\n}\n","/* istanbul ignore file */\n\n/**\n * --------------------------------------------------------------------------\n * Bootstrap (v5.0.0-alpha1): dom/polyfill.js\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n * --------------------------------------------------------------------------\n */\n\nimport { getUID } from '../util/index'\n\nlet find = Element.prototype.querySelectorAll\nlet findOne = Element.prototype.querySelector\n\n// MSEdge resets defaultPrevented flag upon dispatchEvent call if at least one listener is attached\nconst defaultPreventedPreservedOnDispatch = (() => {\n  const e = new CustomEvent('Bootstrap', {\n    cancelable: true\n  })\n\n  const element = document.createElement('div')\n  element.addEventListener('Bootstrap', () => null)\n\n  e.preventDefault()\n  element.dispatchEvent(e)\n  return e.defaultPrevented\n})()\n\nconst scopeSelectorRegex = /:scope\\b/\nconst supportScopeQuery = (() => {\n  const element = document.createElement('div')\n\n  try {\n    element.querySelectorAll(':scope *')\n  } catch (_) {\n    return false\n  }\n\n  return true\n})()\n\nif (!supportScopeQuery) {\n  find = function (selector) {\n    if (!scopeSelectorRegex.test(selector)) {\n      return this.querySelectorAll(selector)\n    }\n\n    const hasId = Boolean(this.id)\n\n    if (!hasId) {\n      this.id = getUID('scope')\n    }\n\n    let nodeList = null\n    try {\n      selector = selector.replace(scopeSelectorRegex, `#${this.id}`)\n      nodeList = this.querySelectorAll(selector)\n    } finally {\n      if (!hasId) {\n        this.removeAttribute('id')\n      }\n    }\n\n    return nodeList\n  }\n\n  findOne = function (selector) {\n    if (!scopeSelectorRegex.test(selector)) {\n      return this.querySelector(selector)\n    }\n\n    const matches = find.call(this, selector)\n\n    if (typeof matches[0] !== 'undefined') {\n      return matches[0]\n    }\n\n    return null\n  }\n}\n\nexport {\n  find,\n  findOne,\n  defaultPreventedPreservedOnDispatch\n}\n"]},"metadata":{},"sourceType":"script"}