{"ast":null,"code":"/*!\n  * Bootstrap event-handler.js v5.0.0-alpha1 (https://getbootstrap.com/)\n  * Copyright 2011-2020 The Bootstrap Authors (https://github.com/twbs/bootstrap/graphs/contributors)\n  * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n  */\n(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory(require('./polyfill.js')) : typeof define === 'function' && define.amd ? define(['./polyfill.js'], factory) : (global = global || self, global.EventHandler = factory(global.Polyfill));\n})(this, function (polyfill_js) {\n  'use strict';\n  /**\n   * --------------------------------------------------------------------------\n   * Bootstrap (v5.0.0-alpha1): util/index.js\n   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n   * --------------------------------------------------------------------------\n   */\n\n  var getjQuery = function getjQuery() {\n    var _window = window,\n        jQuery = _window.jQuery;\n\n    if (jQuery && !document.body.hasAttribute('data-no-jquery')) {\n      return jQuery;\n    }\n\n    return null;\n  };\n  /**\n   * --------------------------------------------------------------------------\n   * Bootstrap (v5.0.0-alpha1): dom/event-handler.js\n   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n   * --------------------------------------------------------------------------\n   */\n\n  /**\n   * ------------------------------------------------------------------------\n   * Constants\n   * ------------------------------------------------------------------------\n   */\n\n\n  var $ = getjQuery();\n  var namespaceRegex = /[^.]*(?=\\..*)\\.|.*/;\n  var stripNameRegex = /\\..*/;\n  var stripUidRegex = /::\\d+$/;\n  var eventRegistry = {}; // Events storage\n\n  var uidEvent = 1;\n  var customEvents = {\n    mouseenter: 'mouseover',\n    mouseleave: 'mouseout'\n  };\n  var nativeEvents = ['click', 'dblclick', 'mouseup', 'mousedown', 'contextmenu', 'mousewheel', 'DOMMouseScroll', 'mouseover', 'mouseout', 'mousemove', 'selectstart', 'selectend', 'keydown', 'keypress', 'keyup', 'orientationchange', 'touchstart', 'touchmove', 'touchend', 'touchcancel', 'pointerdown', 'pointermove', 'pointerup', 'pointerleave', 'pointercancel', 'gesturestart', 'gesturechange', 'gestureend', 'focus', 'blur', 'change', 'reset', 'select', 'submit', 'focusin', 'focusout', 'load', 'unload', 'beforeunload', 'resize', 'move', 'DOMContentLoaded', 'readystatechange', 'error', 'abort', 'scroll'];\n  /**\n   * ------------------------------------------------------------------------\n   * Private methods\n   * ------------------------------------------------------------------------\n   */\n\n  function getUidEvent(element, uid) {\n    return uid && uid + \"::\" + uidEvent++ || element.uidEvent || uidEvent++;\n  }\n\n  function getEvent(element) {\n    var uid = getUidEvent(element);\n    element.uidEvent = uid;\n    eventRegistry[uid] = eventRegistry[uid] || {};\n    return eventRegistry[uid];\n  }\n\n  function bootstrapHandler(element, fn) {\n    return function handler(event) {\n      if (handler.oneOff) {\n        EventHandler.off(element, event.type, fn);\n      }\n\n      return fn.apply(element, [event]);\n    };\n  }\n\n  function bootstrapDelegationHandler(element, selector, fn) {\n    return function handler(event) {\n      var domElements = element.querySelectorAll(selector);\n\n      for (var target = event.target; target && target !== this; target = target.parentNode) {\n        for (var i = domElements.length; i--;) {\n          if (domElements[i] === target) {\n            if (handler.oneOff) {\n              EventHandler.off(element, event.type, fn);\n            }\n\n            return fn.apply(target, [event]);\n          }\n        }\n      } // To please ESLint\n\n\n      return null;\n    };\n  }\n\n  function findHandler(events, handler, delegationSelector) {\n    if (delegationSelector === void 0) {\n      delegationSelector = null;\n    }\n\n    var uidEventList = Object.keys(events);\n\n    for (var i = 0, len = uidEventList.length; i < len; i++) {\n      var event = events[uidEventList[i]];\n\n      if (event.originalHandler === handler && event.delegationSelector === delegationSelector) {\n        return event;\n      }\n    }\n\n    return null;\n  }\n\n  function normalizeParams(originalTypeEvent, handler, delegationFn) {\n    var delegation = typeof handler === 'string';\n    var originalHandler = delegation ? delegationFn : handler; // allow to get the native events from namespaced events ('click.bs.button' --> 'click')\n\n    var typeEvent = originalTypeEvent.replace(stripNameRegex, '');\n    var custom = customEvents[typeEvent];\n\n    if (custom) {\n      typeEvent = custom;\n    }\n\n    var isNative = nativeEvents.indexOf(typeEvent) > -1;\n\n    if (!isNative) {\n      typeEvent = originalTypeEvent;\n    }\n\n    return [delegation, originalHandler, typeEvent];\n  }\n\n  function addHandler(element, originalTypeEvent, handler, delegationFn, oneOff) {\n    if (typeof originalTypeEvent !== 'string' || !element) {\n      return;\n    }\n\n    if (!handler) {\n      handler = delegationFn;\n      delegationFn = null;\n    }\n\n    var _normalizeParams = normalizeParams(originalTypeEvent, handler, delegationFn),\n        delegation = _normalizeParams[0],\n        originalHandler = _normalizeParams[1],\n        typeEvent = _normalizeParams[2];\n\n    var events = getEvent(element);\n    var handlers = events[typeEvent] || (events[typeEvent] = {});\n    var previousFn = findHandler(handlers, originalHandler, delegation ? handler : null);\n\n    if (previousFn) {\n      previousFn.oneOff = previousFn.oneOff && oneOff;\n      return;\n    }\n\n    var uid = getUidEvent(originalHandler, originalTypeEvent.replace(namespaceRegex, ''));\n    var fn = delegation ? bootstrapDelegationHandler(element, handler, delegationFn) : bootstrapHandler(element, handler);\n    fn.delegationSelector = delegation ? handler : null;\n    fn.originalHandler = originalHandler;\n    fn.oneOff = oneOff;\n    fn.uidEvent = uid;\n    handlers[uid] = fn;\n    element.addEventListener(typeEvent, fn, delegation);\n  }\n\n  function removeHandler(element, events, typeEvent, handler, delegationSelector) {\n    var fn = findHandler(events[typeEvent], handler, delegationSelector);\n\n    if (!fn) {\n      return;\n    }\n\n    element.removeEventListener(typeEvent, fn, Boolean(delegationSelector));\n    delete events[typeEvent][fn.uidEvent];\n  }\n\n  function removeNamespacedHandlers(element, events, typeEvent, namespace) {\n    var storeElementEvent = events[typeEvent] || {};\n    Object.keys(storeElementEvent).forEach(function (handlerKey) {\n      if (handlerKey.indexOf(namespace) > -1) {\n        var event = storeElementEvent[handlerKey];\n        removeHandler(element, events, typeEvent, event.originalHandler, event.delegationSelector);\n      }\n    });\n  }\n\n  var EventHandler = {\n    on: function on(element, event, handler, delegationFn) {\n      addHandler(element, event, handler, delegationFn, false);\n    },\n    one: function one(element, event, handler, delegationFn) {\n      addHandler(element, event, handler, delegationFn, true);\n    },\n    off: function off(element, originalTypeEvent, handler, delegationFn) {\n      if (typeof originalTypeEvent !== 'string' || !element) {\n        return;\n      }\n\n      var _normalizeParams2 = normalizeParams(originalTypeEvent, handler, delegationFn),\n          delegation = _normalizeParams2[0],\n          originalHandler = _normalizeParams2[1],\n          typeEvent = _normalizeParams2[2];\n\n      var inNamespace = typeEvent !== originalTypeEvent;\n      var events = getEvent(element);\n      var isNamespace = originalTypeEvent.charAt(0) === '.';\n\n      if (typeof originalHandler !== 'undefined') {\n        // Simplest case: handler is passed, remove that listener ONLY.\n        if (!events || !events[typeEvent]) {\n          return;\n        }\n\n        removeHandler(element, events, typeEvent, originalHandler, delegation ? handler : null);\n        return;\n      }\n\n      if (isNamespace) {\n        Object.keys(events).forEach(function (elementEvent) {\n          removeNamespacedHandlers(element, events, elementEvent, originalTypeEvent.slice(1));\n        });\n      }\n\n      var storeElementEvent = events[typeEvent] || {};\n      Object.keys(storeElementEvent).forEach(function (keyHandlers) {\n        var handlerKey = keyHandlers.replace(stripUidRegex, '');\n\n        if (!inNamespace || originalTypeEvent.indexOf(handlerKey) > -1) {\n          var event = storeElementEvent[keyHandlers];\n          removeHandler(element, events, typeEvent, event.originalHandler, event.delegationSelector);\n        }\n      });\n    },\n    trigger: function trigger(element, event, args) {\n      if (typeof event !== 'string' || !element) {\n        return null;\n      }\n\n      var typeEvent = event.replace(stripNameRegex, '');\n      var inNamespace = event !== typeEvent;\n      var isNative = nativeEvents.indexOf(typeEvent) > -1;\n      var jQueryEvent;\n      var bubbles = true;\n      var nativeDispatch = true;\n      var defaultPrevented = false;\n      var evt = null;\n\n      if (inNamespace && $) {\n        jQueryEvent = $.Event(event, args);\n        $(element).trigger(jQueryEvent);\n        bubbles = !jQueryEvent.isPropagationStopped();\n        nativeDispatch = !jQueryEvent.isImmediatePropagationStopped();\n        defaultPrevented = jQueryEvent.isDefaultPrevented();\n      }\n\n      if (isNative) {\n        evt = document.createEvent('HTMLEvents');\n        evt.initEvent(typeEvent, bubbles, true);\n      } else {\n        evt = new CustomEvent(event, {\n          bubbles: bubbles,\n          cancelable: true\n        });\n      } // merge custom informations in our event\n\n\n      if (typeof args !== 'undefined') {\n        Object.keys(args).forEach(function (key) {\n          Object.defineProperty(evt, key, {\n            get: function get() {\n              return args[key];\n            }\n          });\n        });\n      }\n\n      if (defaultPrevented) {\n        evt.preventDefault();\n\n        if (!polyfill_js.defaultPreventedPreservedOnDispatch) {\n          Object.defineProperty(evt, 'defaultPrevented', {\n            get: function get() {\n              return true;\n            }\n          });\n        }\n      }\n\n      if (nativeDispatch) {\n        element.dispatchEvent(evt);\n      }\n\n      if (evt.defaultPrevented && typeof jQueryEvent !== 'undefined') {\n        jQueryEvent.preventDefault();\n      }\n\n      return evt;\n    }\n  };\n  return EventHandler;\n});","map":{"version":3,"sources":["../../src/util/index.js","../../src/dom/event-handler.js"],"names":["getjQuery","jQuery","document","$","namespaceRegex","stripNameRegex","stripUidRegex","eventRegistry","uidEvent","customEvents","mouseenter","mouseleave","nativeEvents","uid","element","getUidEvent","handler","EventHandler","event","fn","domElements","target","i","delegationSelector","uidEventList","Object","len","events","delegation","originalHandler","typeEvent","originalTypeEvent","custom","isNative","delegationFn","normalizeParams","getEvent","handlers","previousFn","findHandler","bootstrapDelegationHandler","bootstrapHandler","Boolean","storeElementEvent","handlerKey","removeHandler","on","addHandler","one","off","inNamespace","isNamespace","removeNamespacedHandlers","keyHandlers","trigger","bubbles","nativeDispatch","defaultPrevented","evt","jQueryEvent","cancelable","get","args","defaultPreventedPreservedOnDispatch"],"mappings":";;;;;;;;;AAAA;;;;;;;AA6KA,MAAMA,SAAS,GAAG,SAAZA,SAAY,GAAM;AAAA,QAAA,OAAA,GAAA,MAAA;AAAA,QACdC,MADc,GAAA,OAAA,CAAA,MAAA;;AAGtB,QAAIA,MAAM,IAAI,CAACC,QAAQ,CAARA,IAAAA,CAAAA,YAAAA,CAAf,gBAAeA,CAAf,EAA6D;AAC3D,aAAA,MAAA;AACD;;AAED,WAAA,IAAA;AAPF,GAAA;AC7KA;;;;;;;AAUA;;;;;;;AAMA,MAAMC,CAAC,GAAGH,SAAV,EAAA;AACA,MAAMI,cAAc,GAApB,oBAAA;AACA,MAAMC,cAAc,GAApB,MAAA;AACA,MAAMC,aAAa,GAAnB,QAAA;AACA,MAAMC,aAAa,GAAnB,EAAA,C,CAAA;;AACA,MAAIC,QAAQ,GAAZ,CAAA;AACA,MAAMC,YAAY,GAAG;AACnBC,IAAAA,UAAU,EADS,WAAA;AAEnBC,IAAAA,UAAU,EAAE;AAFO,GAArB;AAIA,MAAMC,YAAY,GAAG,CAAA,OAAA,EAAA,UAAA,EAAA,SAAA,EAAA,WAAA,EAAA,aAAA,EAAA,YAAA,EAAA,gBAAA,EAAA,WAAA,EAAA,UAAA,EAAA,WAAA,EAAA,aAAA,EAAA,WAAA,EAAA,SAAA,EAAA,UAAA,EAAA,OAAA,EAAA,mBAAA,EAAA,YAAA,EAAA,WAAA,EAAA,UAAA,EAAA,aAAA,EAAA,aAAA,EAAA,aAAA,EAAA,WAAA,EAAA,cAAA,EAAA,eAAA,EAAA,cAAA,EAAA,eAAA,EAAA,YAAA,EAAA,OAAA,EAAA,MAAA,EAAA,QAAA,EAAA,OAAA,EAAA,QAAA,EAAA,QAAA,EAAA,SAAA,EAAA,UAAA,EAAA,MAAA,EAAA,QAAA,EAAA,cAAA,EAAA,QAAA,EAAA,MAAA,EAAA,kBAAA,EAAA,kBAAA,EAAA,OAAA,EAAA,OAAA,EAArB,QAAqB,CAArB;AAiDA;;;;;;AAMA,WAAA,WAAA,CAAA,OAAA,EAAA,GAAA,EAAmC;AACjC,WAAQC,GAAG,IAAOA,GAAP,GAAA,IAAOA,GAAQL,QAAnB,EAACK,IAAmCC,OAAO,CAA3C,QAACD,IAAuDL,QAA/D,EAAA;AACD;;AAED,WAAA,QAAA,CAAA,OAAA,EAA2B;AACzB,QAAMK,GAAG,GAAGE,WAAW,CAAvB,OAAuB,CAAvB;AAEAD,IAAAA,OAAO,CAAPA,QAAAA,GAAAA,GAAAA;AACAP,IAAAA,aAAa,CAAbA,GAAa,CAAbA,GAAqBA,aAAa,CAAbA,GAAa,CAAbA,IAArBA,EAAAA;AAEA,WAAOA,aAAa,CAApB,GAAoB,CAApB;AACD;;AAED,WAAA,gBAAA,CAAA,OAAA,EAAA,EAAA,EAAuC;AACrC,WAAO,SAAA,OAAA,CAAA,KAAA,EAAwB;AAC7B,UAAIS,OAAO,CAAX,MAAA,EAAoB;AAClBC,QAAAA,YAAY,CAAZA,GAAAA,CAAAA,OAAAA,EAA0BC,KAAK,CAA/BD,IAAAA,EAAAA,EAAAA;AACD;;AAED,aAAOE,EAAE,CAAFA,KAAAA,CAAAA,OAAAA,EAAkB,CAAzB,KAAyB,CAAlBA,CAAP;AALF,KAAA;AAOD;;AAED,WAAA,0BAAA,CAAA,OAAA,EAAA,QAAA,EAAA,EAAA,EAA2D;AACzD,WAAO,SAAA,OAAA,CAAA,KAAA,EAAwB;AAC7B,UAAMC,WAAW,GAAGN,OAAO,CAAPA,gBAAAA,CAApB,QAAoBA,CAApB;;AAEA,WAAA,IAAWO,MAAX,GAAsBH,KAAtB,CAAA,MAAA,EAA6BG,MAAM,IAAIA,MAAM,KAA7C,IAAA,EAAwDA,MAAM,GAAGA,MAAM,CAAvE,UAAA,EAAoF;AAClF,aAAK,IAAIC,CAAC,GAAGF,WAAW,CAAxB,MAAA,EAAiCE,CAAjC,EAAA,GAAuC;AACrC,cAAIF,WAAW,CAAXA,CAAW,CAAXA,KAAJ,MAAA,EAA+B;AAC7B,gBAAIJ,OAAO,CAAX,MAAA,EAAoB;AAClBC,cAAAA,YAAY,CAAZA,GAAAA,CAAAA,OAAAA,EAA0BC,KAAK,CAA/BD,IAAAA,EAAAA,EAAAA;AACD;;AAED,mBAAOE,EAAE,CAAFA,KAAAA,CAAAA,MAAAA,EAAiB,CAAxB,KAAwB,CAAjBA,CAAP;AACD;AACF;AAZ0B,OAAA,CAAA;;;AAgB7B,aAAA,IAAA;AAhBF,KAAA;AAkBD;;AAED,WAAA,WAAA,CAAA,MAAA,EAAA,OAAA,EAAA,kBAAA,EAAiE;AAAA,QAA3BI,kBAA2B,KAAA,KAAA,CAAA,EAAA;AAA3BA,MAAAA,kBAA2B,GAAN,IAArBA;AAA2B;;AAC/D,QAAMC,YAAY,GAAGC,MAAM,CAANA,IAAAA,CAArB,MAAqBA,CAArB;;AAEA,SAAK,IAAIH,CAAC,GAAL,CAAA,EAAWI,GAAG,GAAGF,YAAY,CAAlC,MAAA,EAA2CF,CAAC,GAA5C,GAAA,EAAoDA,CAApD,EAAA,EAAyD;AACvD,UAAMJ,KAAK,GAAGS,MAAM,CAACH,YAAY,CAAjC,CAAiC,CAAb,CAApB;;AAEA,UAAIN,KAAK,CAALA,eAAAA,KAAAA,OAAAA,IAAqCA,KAAK,CAALA,kBAAAA,KAAzC,kBAAA,EAA0F;AACxF,eAAA,KAAA;AACD;AACF;;AAED,WAAA,IAAA;AACD;;AAED,WAAA,eAAA,CAAA,iBAAA,EAAA,OAAA,EAAA,YAAA,EAAmE;AACjE,QAAMU,UAAU,GAAG,OAAA,OAAA,KAAnB,QAAA;AACA,QAAMC,eAAe,GAAGD,UAAU,GAAA,YAAA,GAF+B,OAEjE,CAFiE,CAAA;;AAKjE,QAAIE,SAAS,GAAGC,iBAAiB,CAAjBA,OAAAA,CAAAA,cAAAA,EAAhB,EAAgBA,CAAhB;AACA,QAAMC,MAAM,GAAGvB,YAAY,CAA3B,SAA2B,CAA3B;;AAEA,QAAA,MAAA,EAAY;AACVqB,MAAAA,SAAS,GAATA,MAAAA;AACD;;AAED,QAAMG,QAAQ,GAAGrB,YAAY,CAAZA,OAAAA,CAAAA,SAAAA,IAAkC,CAAnD,CAAA;;AAEA,QAAI,CAAJ,QAAA,EAAe;AACbkB,MAAAA,SAAS,GAATA,iBAAAA;AACD;;AAED,WAAO,CAAA,UAAA,EAAA,eAAA,EAAP,SAAO,CAAP;AACD;;AAED,WAAA,UAAA,CAAA,OAAA,EAAA,iBAAA,EAAA,OAAA,EAAA,YAAA,EAAA,MAAA,EAA+E;AAC7E,QAAI,OAAA,iBAAA,KAAA,QAAA,IAAyC,CAA7C,OAAA,EAAuD;AACrD;AACD;;AAED,QAAI,CAAJ,OAAA,EAAc;AACZd,MAAAA,OAAO,GAAPA,YAAAA;AACAkB,MAAAA,YAAY,GAAZA,IAAAA;AACD;;AAR4E,QAAA,gBAAA,GAU5BC,eAAe,CAAA,iBAAA,EAAA,OAAA,EAVa,YAUb,CAVa;AAAA,QAUtEP,UAVsE,GAAA,gBAAA,CAAA,CAAA,CAAA;AAAA,QAU1DC,eAV0D,GAAA,gBAAA,CAAA,CAAA,CAAA;AAAA,QAUzCC,SAVyC,GAAA,gBAAA,CAAA,CAAA,CAAA;;AAW7E,QAAMH,MAAM,GAAGS,QAAQ,CAAvB,OAAuB,CAAvB;AACA,QAAMC,QAAQ,GAAGV,MAAM,CAANA,SAAM,CAANA,KAAsBA,MAAM,CAANA,SAAM,CAANA,GAAvC,EAAiBA,CAAjB;AACA,QAAMW,UAAU,GAAGC,WAAW,CAAA,QAAA,EAAA,eAAA,EAA4BX,UAAU,GAAA,OAAA,GAApE,IAA8B,CAA9B;;AAEA,QAAA,UAAA,EAAgB;AACdU,MAAAA,UAAU,CAAVA,MAAAA,GAAoBA,UAAU,CAAVA,MAAAA,IAApBA,MAAAA;AAEA;AACD;;AAED,QAAMzB,GAAG,GAAGE,WAAW,CAAA,eAAA,EAAkBgB,iBAAiB,CAAjBA,OAAAA,CAAAA,cAAAA,EAAzC,EAAyCA,CAAlB,CAAvB;AACA,QAAMZ,EAAE,GAAGS,UAAU,GACnBY,0BAA0B,CAAA,OAAA,EAAA,OAAA,EADP,YACO,CADP,GAEnBC,gBAAgB,CAAA,OAAA,EAFlB,OAEkB,CAFlB;AAIAtB,IAAAA,EAAE,CAAFA,kBAAAA,GAAwBS,UAAU,GAAA,OAAA,GAAlCT,IAAAA;AACAA,IAAAA,EAAE,CAAFA,eAAAA,GAAAA,eAAAA;AACAA,IAAAA,EAAE,CAAFA,MAAAA,GAAAA,MAAAA;AACAA,IAAAA,EAAE,CAAFA,QAAAA,GAAAA,GAAAA;AACAkB,IAAAA,QAAQ,CAARA,GAAQ,CAARA,GAAAA,EAAAA;AAEAvB,IAAAA,OAAO,CAAPA,gBAAAA,CAAAA,SAAAA,EAAAA,EAAAA,EAAAA,UAAAA;AACD;;AAED,WAAA,aAAA,CAAA,OAAA,EAAA,MAAA,EAAA,SAAA,EAAA,OAAA,EAAA,kBAAA,EAAgF;AAC9E,QAAMK,EAAE,GAAGoB,WAAW,CAACZ,MAAM,CAAP,SAAO,CAAP,EAAA,OAAA,EAAtB,kBAAsB,CAAtB;;AAEA,QAAI,CAAJ,EAAA,EAAS;AACP;AACD;;AAEDb,IAAAA,OAAO,CAAPA,mBAAAA,CAAAA,SAAAA,EAAAA,EAAAA,EAA2C4B,OAAO,CAAlD5B,kBAAkD,CAAlDA;AACA,WAAOa,MAAM,CAANA,SAAM,CAANA,CAAkBR,EAAE,CAA3B,QAAOQ,CAAP;AACD;;AAED,WAAA,wBAAA,CAAA,OAAA,EAAA,MAAA,EAAA,SAAA,EAAA,SAAA,EAAyE;AACvE,QAAMgB,iBAAiB,GAAGhB,MAAM,CAANA,SAAM,CAANA,IAA1B,EAAA;AAEAF,IAAAA,MAAM,CAANA,IAAAA,CAAAA,iBAAAA,EAAAA,OAAAA,CACW,UAAA,UAAA,EAAc;AACrB,UAAImB,UAAU,CAAVA,OAAAA,CAAAA,SAAAA,IAAgC,CAApC,CAAA,EAAwC;AACtC,YAAM1B,KAAK,GAAGyB,iBAAiB,CAA/B,UAA+B,CAA/B;AAEAE,QAAAA,aAAa,CAAA,OAAA,EAAA,MAAA,EAAA,SAAA,EAA6B3B,KAAK,CAAlC,eAAA,EAAoDA,KAAK,CAAtE2B,kBAAa,CAAbA;AACD;AANLpB,KAAAA;AAQD;;MAEKR,YAAY,GAAG;AACnB6B,IAAAA,EADmB,EAAA,SAAA,EAAA,CAAA,OAAA,EAAA,KAAA,EAAA,OAAA,EAAA,YAAA,EACuB;AACxCC,MAAAA,UAAU,CAAA,OAAA,EAAA,KAAA,EAAA,OAAA,EAAA,YAAA,EAAVA,KAAU,CAAVA;AAFiB,KAAA;AAKnBC,IAAAA,GALmB,EAAA,SAAA,GAAA,CAAA,OAAA,EAAA,KAAA,EAAA,OAAA,EAAA,YAAA,EAKwB;AACzCD,MAAAA,UAAU,CAAA,OAAA,EAAA,KAAA,EAAA,OAAA,EAAA,YAAA,EAAVA,IAAU,CAAVA;AANiB,KAAA;AASnBE,IAAAA,GATmB,EAAA,SAAA,GAAA,CAAA,OAAA,EAAA,iBAAA,EAAA,OAAA,EAAA,YAAA,EASoC;AACrD,UAAI,OAAA,iBAAA,KAAA,QAAA,IAAyC,CAA7C,OAAA,EAAuD;AACrD;AACD;;AAHoD,UAAA,iBAAA,GAKJd,eAAe,CAAA,iBAAA,EAAA,OAAA,EALX,YAKW,CALX;AAAA,UAK9CP,UAL8C,GAAA,iBAAA,CAAA,CAAA,CAAA;AAAA,UAKlCC,eALkC,GAAA,iBAAA,CAAA,CAAA,CAAA;AAAA,UAKjBC,SALiB,GAAA,iBAAA,CAAA,CAAA,CAAA;;AAMrD,UAAMoB,WAAW,GAAGpB,SAAS,KAA7B,iBAAA;AACA,UAAMH,MAAM,GAAGS,QAAQ,CAAvB,OAAuB,CAAvB;AACA,UAAMe,WAAW,GAAGpB,iBAAiB,CAAjBA,MAAAA,CAAAA,CAAAA,MAApB,GAAA;;AAEA,UAAI,OAAA,eAAA,KAAJ,WAAA,EAA4C;AAC1C;AACA,YAAI,CAAA,MAAA,IAAW,CAACJ,MAAM,CAAtB,SAAsB,CAAtB,EAAmC;AACjC;AACD;;AAEDkB,QAAAA,aAAa,CAAA,OAAA,EAAA,MAAA,EAAA,SAAA,EAAA,eAAA,EAA8CjB,UAAU,GAAA,OAAA,GAArEiB,IAAa,CAAbA;AACA;AACD;;AAED,UAAA,WAAA,EAAiB;AACfpB,QAAAA,MAAM,CAANA,IAAAA,CAAAA,MAAAA,EAAAA,OAAAA,CACW,UAAA,YAAA,EAAgB;AACvB2B,UAAAA,wBAAwB,CAAA,OAAA,EAAA,MAAA,EAAA,YAAA,EAAgCrB,iBAAiB,CAAjBA,KAAAA,CAAxDqB,CAAwDrB,CAAhC,CAAxBqB;AAFJ3B,SAAAA;AAID;;AAED,UAAMkB,iBAAiB,GAAGhB,MAAM,CAANA,SAAM,CAANA,IAA1B,EAAA;AACAF,MAAAA,MAAM,CAANA,IAAAA,CAAAA,iBAAAA,EAAAA,OAAAA,CACW,UAAA,WAAA,EAAe;AACtB,YAAMmB,UAAU,GAAGS,WAAW,CAAXA,OAAAA,CAAAA,aAAAA,EAAnB,EAAmBA,CAAnB;;AAEA,YAAI,CAAA,WAAA,IAAgBtB,iBAAiB,CAAjBA,OAAAA,CAAAA,UAAAA,IAAwC,CAA5D,CAAA,EAAgE;AAC9D,cAAMb,KAAK,GAAGyB,iBAAiB,CAA/B,WAA+B,CAA/B;AAEAE,UAAAA,aAAa,CAAA,OAAA,EAAA,MAAA,EAAA,SAAA,EAA6B3B,KAAK,CAAlC,eAAA,EAAoDA,KAAK,CAAtE2B,kBAAa,CAAbA;AACD;AARLpB,OAAAA;AArCiB,KAAA;AAiDnB6B,IAAAA,OAjDmB,EAAA,SAAA,OAAA,CAAA,OAAA,EAAA,KAAA,EAAA,IAAA,EAiDW;AAC5B,UAAI,OAAA,KAAA,KAAA,QAAA,IAA6B,CAAjC,OAAA,EAA2C;AACzC,eAAA,IAAA;AACD;;AAED,UAAMxB,SAAS,GAAGZ,KAAK,CAALA,OAAAA,CAAAA,cAAAA,EAAlB,EAAkBA,CAAlB;AACA,UAAMgC,WAAW,GAAGhC,KAAK,KAAzB,SAAA;AACA,UAAMe,QAAQ,GAAGrB,YAAY,CAAZA,OAAAA,CAAAA,SAAAA,IAAkC,CAAnD,CAAA;AAEA,UAAA,WAAA;AACA,UAAI2C,OAAO,GAAX,IAAA;AACA,UAAIC,cAAc,GAAlB,IAAA;AACA,UAAIC,gBAAgB,GAApB,KAAA;AACA,UAAIC,GAAG,GAAP,IAAA;;AAEA,UAAIR,WAAW,IAAf,CAAA,EAAsB;AACpBS,QAAAA,WAAW,GAAGxD,CAAC,CAADA,KAAAA,CAAAA,KAAAA,EAAdwD,IAAcxD,CAAdwD;AAEAxD,QAAAA,CAAC,CAADA,OAAC,CAADA,CAAAA,OAAAA,CAAAA,WAAAA;AACAoD,QAAAA,OAAO,GAAG,CAACI,WAAW,CAAtBJ,oBAAWI,EAAXJ;AACAC,QAAAA,cAAc,GAAG,CAACG,WAAW,CAA7BH,6BAAkBG,EAAlBH;AACAC,QAAAA,gBAAgB,GAAGE,WAAW,CAA9BF,kBAAmBE,EAAnBF;AACD;;AAED,UAAA,QAAA,EAAc;AACZC,QAAAA,GAAG,GAAGxD,QAAQ,CAARA,WAAAA,CAANwD,YAAMxD,CAANwD;AACAA,QAAAA,GAAG,CAAHA,SAAAA,CAAAA,SAAAA,EAAAA,OAAAA,EAAAA,IAAAA;AAFF,OAAA,MAGO;AACLA,QAAAA,GAAG,GAAG,IAAA,WAAA,CAAA,KAAA,EAAuB;AAC3BH,UAAAA,OAAO,EADoB,OAAA;AAE3BK,UAAAA,UAAU,EAAE;AAFe,SAAvB,CAANF;AA5B0B,OAAA,CAAA;;;AAmC5B,UAAI,OAAA,IAAA,KAAJ,WAAA,EAAiC;AAC/BjC,QAAAA,MAAM,CAANA,IAAAA,CAAAA,IAAAA,EAAAA,OAAAA,CACW,UAAA,GAAA,EAAO;AACdA,UAAAA,MAAM,CAANA,cAAAA,CAAAA,GAAAA,EAAAA,GAAAA,EAAgC;AAC9BoC,YAAAA,GAD8B,EAAA,SAAA,GAAA,GACxB;AACJ,qBAAOC,IAAI,CAAX,GAAW,CAAX;AACD;AAH6B,WAAhCrC;AAFJA,SAAAA;AAQD;;AAED,UAAA,gBAAA,EAAsB;AACpBiC,QAAAA,GAAG,CAAHA,cAAAA;;AAEA,YAAI,CAACK,WAAAA,CAAL,mCAAA,EAA0C;AACxCtC,UAAAA,MAAM,CAANA,cAAAA,CAAAA,GAAAA,EAAAA,kBAAAA,EAA+C;AAC7CoC,YAAAA,GAAG,EAAE,SAAA,GAAA,GAAA;AAAA,qBAAA,IAAA;AAAA;AADwC,WAA/CpC;AAGD;AACF;;AAED,UAAA,cAAA,EAAoB;AAClBX,QAAAA,OAAO,CAAPA,aAAAA,CAAAA,GAAAA;AACD;;AAED,UAAI4C,GAAG,CAAHA,gBAAAA,IAAwB,OAAA,WAAA,KAA5B,WAAA,EAAgE;AAC9DC,QAAAA,WAAW,CAAXA,cAAAA;AACD;;AAED,aAAA,GAAA;AACD;AAlHkB,G","sourcesContent":["/**\n * --------------------------------------------------------------------------\n * Bootstrap (v5.0.0-alpha1): util/index.js\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n * --------------------------------------------------------------------------\n */\n\nconst MAX_UID = 1000000\nconst MILLISECONDS_MULTIPLIER = 1000\nconst TRANSITION_END = 'transitionend'\n\n// Shoutout AngusCroll (https://goo.gl/pxwQGp)\nconst toType = obj => {\n  if (obj === null || obj === undefined) {\n    return `${obj}`\n  }\n\n  return {}.toString.call(obj).match(/\\s([a-z]+)/i)[1].toLowerCase()\n}\n\n/**\n * --------------------------------------------------------------------------\n * Public Util Api\n * --------------------------------------------------------------------------\n */\n\nconst getUID = prefix => {\n  do {\n    prefix += Math.floor(Math.random() * MAX_UID)\n  } while (document.getElementById(prefix))\n\n  return prefix\n}\n\nconst getSelector = element => {\n  let selector = element.getAttribute('data-target')\n\n  if (!selector || selector === '#') {\n    const hrefAttr = element.getAttribute('href')\n\n    selector = hrefAttr && hrefAttr !== '#' ? hrefAttr.trim() : null\n  }\n\n  return selector\n}\n\nconst getSelectorFromElement = element => {\n  const selector = getSelector(element)\n\n  if (selector) {\n    return document.querySelector(selector) ? selector : null\n  }\n\n  return null\n}\n\nconst getElementFromSelector = element => {\n  const selector = getSelector(element)\n\n  return selector ? document.querySelector(selector) : null\n}\n\nconst getTransitionDurationFromElement = element => {\n  if (!element) {\n    return 0\n  }\n\n  // Get transition-duration of the element\n  let {\n    transitionDuration,\n    transitionDelay\n  } = window.getComputedStyle(element)\n\n  const floatTransitionDuration = parseFloat(transitionDuration)\n  const floatTransitionDelay = parseFloat(transitionDelay)\n\n  // Return 0 if element or transition duration is not found\n  if (!floatTransitionDuration && !floatTransitionDelay) {\n    return 0\n  }\n\n  // If multiple durations are defined, take the first\n  transitionDuration = transitionDuration.split(',')[0]\n  transitionDelay = transitionDelay.split(',')[0]\n\n  return (parseFloat(transitionDuration) + parseFloat(transitionDelay)) * MILLISECONDS_MULTIPLIER\n}\n\nconst triggerTransitionEnd = element => {\n  element.dispatchEvent(new Event(TRANSITION_END))\n}\n\nconst isElement = obj => (obj[0] || obj).nodeType\n\nconst emulateTransitionEnd = (element, duration) => {\n  let called = false\n  const durationPadding = 5\n  const emulatedDuration = duration + durationPadding\n  function listener() {\n    called = true\n    element.removeEventListener(TRANSITION_END, listener)\n  }\n\n  element.addEventListener(TRANSITION_END, listener)\n  setTimeout(() => {\n    if (!called) {\n      triggerTransitionEnd(element)\n    }\n  }, emulatedDuration)\n}\n\nconst typeCheckConfig = (componentName, config, configTypes) => {\n  Object.keys(configTypes)\n    .forEach(property => {\n      const expectedTypes = configTypes[property]\n      const value = config[property]\n      const valueType = value && isElement(value) ?\n        'element' :\n        toType(value)\n\n      if (!new RegExp(expectedTypes).test(valueType)) {\n        throw new Error(\n          `${componentName.toUpperCase()}: ` +\n          `Option \"${property}\" provided type \"${valueType}\" ` +\n          `but expected type \"${expectedTypes}\".`)\n      }\n    })\n}\n\nconst isVisible = element => {\n  if (!element) {\n    return false\n  }\n\n  if (element.style && element.parentNode && element.parentNode.style) {\n    const elementStyle = getComputedStyle(element)\n    const parentNodeStyle = getComputedStyle(element.parentNode)\n\n    return elementStyle.display !== 'none' &&\n      parentNodeStyle.display !== 'none' &&\n      elementStyle.visibility !== 'hidden'\n  }\n\n  return false\n}\n\nconst findShadowRoot = element => {\n  if (!document.documentElement.attachShadow) {\n    return null\n  }\n\n  // Can find the shadow root otherwise it'll return the document\n  if (typeof element.getRootNode === 'function') {\n    const root = element.getRootNode()\n    return root instanceof ShadowRoot ? root : null\n  }\n\n  if (element instanceof ShadowRoot) {\n    return element\n  }\n\n  // when we don't find a shadow root\n  if (!element.parentNode) {\n    return null\n  }\n\n  return findShadowRoot(element.parentNode)\n}\n\nconst noop = () => function () {}\n\nconst reflow = element => element.offsetHeight\n\nconst getjQuery = () => {\n  const { jQuery } = window\n\n  if (jQuery && !document.body.hasAttribute('data-no-jquery')) {\n    return jQuery\n  }\n\n  return null\n}\n\nexport {\n  getjQuery,\n  TRANSITION_END,\n  getUID,\n  getSelectorFromElement,\n  getElementFromSelector,\n  getTransitionDurationFromElement,\n  triggerTransitionEnd,\n  isElement,\n  emulateTransitionEnd,\n  typeCheckConfig,\n  isVisible,\n  findShadowRoot,\n  noop,\n  reflow\n}\n","/**\n * --------------------------------------------------------------------------\n * Bootstrap (v5.0.0-alpha1): dom/event-handler.js\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n * --------------------------------------------------------------------------\n */\n\nimport { getjQuery } from '../util/index'\nimport { defaultPreventedPreservedOnDispatch } from './polyfill'\n\n/**\n * ------------------------------------------------------------------------\n * Constants\n * ------------------------------------------------------------------------\n */\n\nconst $ = getjQuery()\nconst namespaceRegex = /[^.]*(?=\\..*)\\.|.*/\nconst stripNameRegex = /\\..*/\nconst stripUidRegex = /::\\d+$/\nconst eventRegistry = {} // Events storage\nlet uidEvent = 1\nconst customEvents = {\n  mouseenter: 'mouseover',\n  mouseleave: 'mouseout'\n}\nconst nativeEvents = [\n  'click',\n  'dblclick',\n  'mouseup',\n  'mousedown',\n  'contextmenu',\n  'mousewheel',\n  'DOMMouseScroll',\n  'mouseover',\n  'mouseout',\n  'mousemove',\n  'selectstart',\n  'selectend',\n  'keydown',\n  'keypress',\n  'keyup',\n  'orientationchange',\n  'touchstart',\n  'touchmove',\n  'touchend',\n  'touchcancel',\n  'pointerdown',\n  'pointermove',\n  'pointerup',\n  'pointerleave',\n  'pointercancel',\n  'gesturestart',\n  'gesturechange',\n  'gestureend',\n  'focus',\n  'blur',\n  'change',\n  'reset',\n  'select',\n  'submit',\n  'focusin',\n  'focusout',\n  'load',\n  'unload',\n  'beforeunload',\n  'resize',\n  'move',\n  'DOMContentLoaded',\n  'readystatechange',\n  'error',\n  'abort',\n  'scroll'\n]\n\n/**\n * ------------------------------------------------------------------------\n * Private methods\n * ------------------------------------------------------------------------\n */\n\nfunction getUidEvent(element, uid) {\n  return (uid && `${uid}::${uidEvent++}`) || element.uidEvent || uidEvent++\n}\n\nfunction getEvent(element) {\n  const uid = getUidEvent(element)\n\n  element.uidEvent = uid\n  eventRegistry[uid] = eventRegistry[uid] || {}\n\n  return eventRegistry[uid]\n}\n\nfunction bootstrapHandler(element, fn) {\n  return function handler(event) {\n    if (handler.oneOff) {\n      EventHandler.off(element, event.type, fn)\n    }\n\n    return fn.apply(element, [event])\n  }\n}\n\nfunction bootstrapDelegationHandler(element, selector, fn) {\n  return function handler(event) {\n    const domElements = element.querySelectorAll(selector)\n\n    for (let { target } = event; target && target !== this; target = target.parentNode) {\n      for (let i = domElements.length; i--;) {\n        if (domElements[i] === target) {\n          if (handler.oneOff) {\n            EventHandler.off(element, event.type, fn)\n          }\n\n          return fn.apply(target, [event])\n        }\n      }\n    }\n\n    // To please ESLint\n    return null\n  }\n}\n\nfunction findHandler(events, handler, delegationSelector = null) {\n  const uidEventList = Object.keys(events)\n\n  for (let i = 0, len = uidEventList.length; i < len; i++) {\n    const event = events[uidEventList[i]]\n\n    if (event.originalHandler === handler && event.delegationSelector === delegationSelector) {\n      return event\n    }\n  }\n\n  return null\n}\n\nfunction normalizeParams(originalTypeEvent, handler, delegationFn) {\n  const delegation = typeof handler === 'string'\n  const originalHandler = delegation ? delegationFn : handler\n\n  // allow to get the native events from namespaced events ('click.bs.button' --> 'click')\n  let typeEvent = originalTypeEvent.replace(stripNameRegex, '')\n  const custom = customEvents[typeEvent]\n\n  if (custom) {\n    typeEvent = custom\n  }\n\n  const isNative = nativeEvents.indexOf(typeEvent) > -1\n\n  if (!isNative) {\n    typeEvent = originalTypeEvent\n  }\n\n  return [delegation, originalHandler, typeEvent]\n}\n\nfunction addHandler(element, originalTypeEvent, handler, delegationFn, oneOff) {\n  if (typeof originalTypeEvent !== 'string' || !element) {\n    return\n  }\n\n  if (!handler) {\n    handler = delegationFn\n    delegationFn = null\n  }\n\n  const [delegation, originalHandler, typeEvent] = normalizeParams(originalTypeEvent, handler, delegationFn)\n  const events = getEvent(element)\n  const handlers = events[typeEvent] || (events[typeEvent] = {})\n  const previousFn = findHandler(handlers, originalHandler, delegation ? handler : null)\n\n  if (previousFn) {\n    previousFn.oneOff = previousFn.oneOff && oneOff\n\n    return\n  }\n\n  const uid = getUidEvent(originalHandler, originalTypeEvent.replace(namespaceRegex, ''))\n  const fn = delegation ?\n    bootstrapDelegationHandler(element, handler, delegationFn) :\n    bootstrapHandler(element, handler)\n\n  fn.delegationSelector = delegation ? handler : null\n  fn.originalHandler = originalHandler\n  fn.oneOff = oneOff\n  fn.uidEvent = uid\n  handlers[uid] = fn\n\n  element.addEventListener(typeEvent, fn, delegation)\n}\n\nfunction removeHandler(element, events, typeEvent, handler, delegationSelector) {\n  const fn = findHandler(events[typeEvent], handler, delegationSelector)\n\n  if (!fn) {\n    return\n  }\n\n  element.removeEventListener(typeEvent, fn, Boolean(delegationSelector))\n  delete events[typeEvent][fn.uidEvent]\n}\n\nfunction removeNamespacedHandlers(element, events, typeEvent, namespace) {\n  const storeElementEvent = events[typeEvent] || {}\n\n  Object.keys(storeElementEvent)\n    .forEach(handlerKey => {\n      if (handlerKey.indexOf(namespace) > -1) {\n        const event = storeElementEvent[handlerKey]\n\n        removeHandler(element, events, typeEvent, event.originalHandler, event.delegationSelector)\n      }\n    })\n}\n\nconst EventHandler = {\n  on(element, event, handler, delegationFn) {\n    addHandler(element, event, handler, delegationFn, false)\n  },\n\n  one(element, event, handler, delegationFn) {\n    addHandler(element, event, handler, delegationFn, true)\n  },\n\n  off(element, originalTypeEvent, handler, delegationFn) {\n    if (typeof originalTypeEvent !== 'string' || !element) {\n      return\n    }\n\n    const [delegation, originalHandler, typeEvent] = normalizeParams(originalTypeEvent, handler, delegationFn)\n    const inNamespace = typeEvent !== originalTypeEvent\n    const events = getEvent(element)\n    const isNamespace = originalTypeEvent.charAt(0) === '.'\n\n    if (typeof originalHandler !== 'undefined') {\n      // Simplest case: handler is passed, remove that listener ONLY.\n      if (!events || !events[typeEvent]) {\n        return\n      }\n\n      removeHandler(element, events, typeEvent, originalHandler, delegation ? handler : null)\n      return\n    }\n\n    if (isNamespace) {\n      Object.keys(events)\n        .forEach(elementEvent => {\n          removeNamespacedHandlers(element, events, elementEvent, originalTypeEvent.slice(1))\n        })\n    }\n\n    const storeElementEvent = events[typeEvent] || {}\n    Object.keys(storeElementEvent)\n      .forEach(keyHandlers => {\n        const handlerKey = keyHandlers.replace(stripUidRegex, '')\n\n        if (!inNamespace || originalTypeEvent.indexOf(handlerKey) > -1) {\n          const event = storeElementEvent[keyHandlers]\n\n          removeHandler(element, events, typeEvent, event.originalHandler, event.delegationSelector)\n        }\n      })\n  },\n\n  trigger(element, event, args) {\n    if (typeof event !== 'string' || !element) {\n      return null\n    }\n\n    const typeEvent = event.replace(stripNameRegex, '')\n    const inNamespace = event !== typeEvent\n    const isNative = nativeEvents.indexOf(typeEvent) > -1\n\n    let jQueryEvent\n    let bubbles = true\n    let nativeDispatch = true\n    let defaultPrevented = false\n    let evt = null\n\n    if (inNamespace && $) {\n      jQueryEvent = $.Event(event, args)\n\n      $(element).trigger(jQueryEvent)\n      bubbles = !jQueryEvent.isPropagationStopped()\n      nativeDispatch = !jQueryEvent.isImmediatePropagationStopped()\n      defaultPrevented = jQueryEvent.isDefaultPrevented()\n    }\n\n    if (isNative) {\n      evt = document.createEvent('HTMLEvents')\n      evt.initEvent(typeEvent, bubbles, true)\n    } else {\n      evt = new CustomEvent(event, {\n        bubbles,\n        cancelable: true\n      })\n    }\n\n    // merge custom informations in our event\n    if (typeof args !== 'undefined') {\n      Object.keys(args)\n        .forEach(key => {\n          Object.defineProperty(evt, key, {\n            get() {\n              return args[key]\n            }\n          })\n        })\n    }\n\n    if (defaultPrevented) {\n      evt.preventDefault()\n\n      if (!defaultPreventedPreservedOnDispatch) {\n        Object.defineProperty(evt, 'defaultPrevented', {\n          get: () => true\n        })\n      }\n    }\n\n    if (nativeDispatch) {\n      element.dispatchEvent(evt)\n    }\n\n    if (evt.defaultPrevented && typeof jQueryEvent !== 'undefined') {\n      jQueryEvent.preventDefault()\n    }\n\n    return evt\n  }\n}\n\nexport default EventHandler\n"]},"metadata":{},"sourceType":"script"}